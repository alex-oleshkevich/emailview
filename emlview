#!/usr/bin/python3
import base64
import tempfile
from PyQt5.QtCore import Qt, QModelIndex
import os

import sys, email, quopri
import PyQt5
from PyQt5.QtWidgets import QApplication, QWidget, QMainWindow, QMessageBox, QMenu, QFileDialog
from PyQt5.QtGui import QIcon, QStandardItemModel, QStandardItem
from PyQt5.uic import loadUi
import signal
import re
import subprocess

signal.signal(signal.SIGINT, signal.SIG_DFL)

ui_files = ('mainwindow.ui', '/usr/share/emlview/mainwindow.ui')


def find_file(file_set):
    return [file for file in file_set if os.path.exists(file)][0]


class App(QMainWindow):
    def __init__(self):
        QMainWindow.__init__(self)
        self.initUI()
        self.loadEml()

    def initUI(self):
        loadUi(find_file(ui_files), self)

    def keyPressEvent(self, e):
        if e.key() == Qt.Key_Escape:
            self.close()

    def decode(self, content, transfer_encoding, text_encoding=None):
        if transfer_encoding == 'quoted-printable':
            decoded = quopri.decodestring(content)
            if text_encoding:
                decoded = decoded.decode(text_encoding)
            return decoded
        elif transfer_encoding == 'base64':
            return base64.b64decode(content)
        elif transfer_encoding == '8bit':
            return base64.b64decode(content)

    def loadEml(self):
        try:
            if len(sys.argv) == 1:
                raise IOError("No file provided")

            filename = sys.argv[1]
            if not os.path.exists(filename):
                raise IOError("emlview: error loading document", "Cannot load file (does not exist)")

            fp = open(filename, 'r')
            message = email.message_from_file(fp)
            fp.close()

            attacments_model = QStandardItemModel()
            self.list_attachments.setModel(attacments_model)
            self.list_attachments.doubleClicked.connect(self.onAttachmentClicked)

            self.list_attachments.setContextMenuPolicy(Qt.CustomContextMenu)
            self.list_attachments.customContextMenuRequested.connect(self.showAttachmentMenu)

            text_body = ''
            html_body = ''
            for part in message.walk():
                if part['Content-Type'] is None:
                    part['Content-Type'] = ''
                   
                print (part['Content-Type'])
                if part['Content-Type'].startswith('text/'):
                    meta_parts = part['Content-Type'].split(';')
                    content_type = meta_parts[0]

                    encoding = None
                    if len(meta_parts) == 2:
                        encoding = part['Content-Type'].split(';')[1].split('=')[1]
                    transfer_encoding = part['Content-Transfer-Encoding']
                    if content_type == 'text/html':
                        if transfer_encoding == '8bit':
                            html_body = part.get_payload()
                        elif transfer_encoding is None:
                            html_body = part.get_payload()
                        else:
                            html_body = self.decode(part.get_payload(), transfer_encoding, encoding)
                    elif content_type == 'text/plain':
                        text_body = part.get_payload()
                else:
                    content_disposition = part['Content-Disposition']
                    if content_disposition and content_disposition.startswith('attachment'):
                        data = (part.get_filename(), part['Content-Transfer-Encoding'], part.get_payload())
                        item = QStandardItem(part.get_filename())
                        item.setData(data, Qt.UserRole)
                        attacments_model.appendRow(item)

            tos = ' '.join([string.strip().strip("'") for string in message['to'].split("\n") if len(string.strip().strip("'")) >0])

            self.label_subject.setText(message['subject'].replace('\n', ''))
            self.label_from.setText(message['from'].replace('\n', ''))
            self.label_to.setText(tos)
            self.label_date.setText(message['date'].replace('\n', ''))
            self.textBrowser.setText(text_body)
            self.webView.setHtml(html_body)
            self.tb_raw.setText(str(message))
            
            if message['cc']:
                self.label_cc.setText(message['cc'].replace('\n', ''))

            if message['bcc']:
                self.label_bcc.setText(message['bcc'].replace('\n', ''))

            if html_body is None:
                self.bodies.tabBar().removeTab(0)
                self.bodies.setCurrentIndex(1)
            
            self.statusBar().showMessage('Loaded: %s' % os.path.abspath(filename))
            if attacments_model.rowCount() == 0:
                self.frame_attachments.setVisible(False)


        except IOError as e:
            print(e)
            QMessageBox.critical(self, "emlview: error loading document", str(e)).show()

    def onAttachmentClicked(self, index):
        item = self.list_attachments.model().itemData(index)[Qt.UserRole]
        filename = item[0]
        transfer_encoding = item[1]
        content = item[2]

        tmp_filename = '/tmp/' + filename
        handle = open(tmp_filename, 'wb')
        handle.write(self.decode(content, transfer_encoding))
        handle.close()

        subprocess.call(['xdg-open', tmp_filename])

    def showAttachmentMenu(self, pos):
        def openAttachment():
            index = self.list_attachments.indexAt(pos)
            self.onAttachmentClicked(index)

        def saveAttachment():
            index = self.list_attachments.indexAt(pos)
            item = self.list_attachments.model().itemData(index)[Qt.UserRole]
            filename = item[0]
            transfer_encoding = item[1]
            content = item[2]

            dest_filename = QFileDialog.getSaveFileName(self, 'Save attachment', filename)
            if dest_filename[0] != "":
                handle = open(dest_filename[0], 'wb')
                handle.write(self.decode(content, transfer_encoding))
                handle.close()

        menu = QMenu()
        openAction = menu.addAction("Open")
        openAction.triggered.connect(openAttachment)

        saveAction = menu.addAction("Save")
        saveAction.triggered.connect(saveAttachment)

        menu.exec_(self.list_attachments.mapToGlobal(pos))



if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = App()
    window.show()
    sys.exit(app.exec_())
